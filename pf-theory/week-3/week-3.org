#+Title: Programming Fundamentals Theory: Assignment 1, Week 3
#+Author: Hamza Shahid

* Problem 1: Miles per Hour to Kilometers per Seconds
** Problem
This year olympics were held in Europe causing all sorts of problems for the Americans as they don’t
use the standard measures like meters and kilometers, grams and kilograms. For racing events the
speeds are measured in kilometers per seconds. Can you design a solution to convert kilometers per
seconds to miles per hour for US viewers of the Paris Olympics?
** IPO
|------------------------------+-------------------------------------+-------------------------|
| Input                        | Processing                          | Output                  |
|------------------------------+-------------------------------------+-------------------------|
| Speed in kilometers per hour | Input speed                         | Speed in miles per hour |
|                              | Result = speed * 60 * 60 / 1.609344 |                         |
|                              | Print Result                        |                         |
|------------------------------+-------------------------------------+-------------------------|
** Pseudocode
#+begin_src fundamental
  START

  READ Speed
  SET Result = Speed * 60 * 60 / 1.609344
  PRINT Speed, " km/s = ", Result, " mi/h"

  END
#+end_src
** Flowchart
[[file:problem-1.svg]]

* Problem 2: Even or Odds
** Problem
Mr. Bhola does not know what an even or odd number is. He is least bothered to learn the difference
either. It all comes down to your programming skills to design a program that will ask for a
positive number greater than 0 and prints whether the number is even or odd. Be careful, Mr. Bhola
can even enter 0 or negative numbers so your solution must give an error saying invalid input in
that case.
** IPO
|--------+-------------------------------------------+--------------------------|
| Input  | Processing                                | Output                   |
|--------+-------------------------------------------+--------------------------|
| Number | Input Num                                 | If Number is even or odd |
|        | If Num <= 0                               |                          |
|        | Print "Invalid input"                     |                          |
|        | Otherwise, continue...                    |                          |
|        | If remainder of dividing Num by 2 is zero |                          |
|        | Print "Even"                              |                          |
|        | Otherwise                                 |                          |
|        | Print "Odd"                               |                          |
|--------+-------------------------------------------+--------------------------|
** Pseudocode
#+begin_src fundamental
  START

  READ Num
  IF Num <= 0 THEN
      PRINT "Invalid input"
  ELSE
      IF Num % 2 == 0 THEN
  	    PRINT "Even"
  	ELSE
  	    PRINT "Odd"
  	ENDIF
  ENDIF

  END
#+end_src
** Flowchart
[[file:problem-2.svg]]

* Problem 3: Legal Age of Marriage in Pakistan
** Problem
Child marriages are a major problem in Pakistan. To avoid responsibility the Federal Government
delegated the task of Child Marriage Laws to provinces. Only Punjab and Sindh have updated the laws
while in Punjab the law is going under another amendment this year. To make things simple in Sindh,
No child, girl or boy, below the age of 18 can marry. Whereas in Punjab (until the new bill is
passed) and other provinces ACT of 1929 is followed which prohibits girls below the age of 16 to
marry whereas for boys the age is 18.  You are required to design a solution for both provinces to
make this decision easy by asking relevant information from the user and giving output whether it is
legal to marry to or not.
** IPO
|-------------+----------------------------------------+-------------------------------------------------------|
| Input       | Processing                             | Output                                                |
|-------------+----------------------------------------+-------------------------------------------------------|
| Province    | Input Province, BoyAge, GirlAge        | If the boy and girl can marry in the province legally |
| Age of Boy  | If province is Sindh                   |                                                       |
| Age of Girl | Then If BoyAge >= 18 and GirlAge >= 18 |                                                       |
|             | Print "Legal"                          |                                                       |
|             | Otherwise Print "Illegal"              |                                                       |
|             | If province is not Sindh               |                                                       |
|             | Then If BoyAge >= 18 and GirlAge >= 16 |                                                       |
|             | Print "Legal"                          |                                                       |
|             | Otherwise Print "Illegal"              |                                                       |
|-------------+----------------------------------------+-------------------------------------------------------|
** Pseudocode
#+begin_src fundamental
  START

  READ Province, BoyAge, GirlAge
  IF Province == "Sindh" THEN
      IF BoyAge >= 18 && GirlAge >= 18 THEN
  	    PRINT "Legal"
  	ELSE
  	    PRINT "Illegal"
  	ENDIF
  ELSE
      IF BoyAge >= 18 && GirlAge >= 16 THEN
  	    PRINT "Legal"
  	ELSE
  	    PRINT "Illegal"
  	ENDIF
  ENDIF

  END
#+end_src
** Flowchart
[[file:problem-3.svg]]
* Problem 4: Grocery Assistance/Calculator
** Problem
Imagine Mr. Bhoola is going to the market to buy some yummy fruits and vegetables. He's a little bit
forgetful, so he doesn't always have a list or a fixed amount of money to spend. We're going to help
Mr. Bhoola figure out how much he needs to pay and how much change he gets back. Here's what we need
to know:
+ How much money Mr. Bhoola has today to buy fruits and vegetables.
+ The prices of the onions, apricots, grapes, and tomatoes at the market.
+ What vegetables Mr. Bhoola buys and how many of each.
Here is an example of some random day in life of Mr. Bhoola
1. What fruits and vegetables does Mr. Bhoola buy today? (For example, 2kg onions, 1 kg of grapes,
   and 3kg tomatoes)
2. What are the prices of each vegetable today? (For example, onions cost $1 per kg, grapes cost $2
   per kg, and tomatoes cost $0.50 per kg)
3. How much money does Mr. Bhoola have with him ? (For example, $10)
Design a solution to help Mr. Bhoola every time he goes shopping!
** IPO
|-------------------+-------------------------------------------------------------------+------------|
| Input             | Processing                                                        | Output     |
|-------------------+-------------------------------------------------------------------+------------|
| Initial Balance   | Input Balance                                                     | Total Cost |
| Prices of Items   | Input OnionPrice, ApricotPrice, GrapePrice, TomatoPrice           | Change     |
| Quantity of Items | Input OnionsBought, ApricotsBought, GrapesBought, TomatoesBought  |            |
|                   | Set OnionCost   To OnionsBought   × OnionPrice                    |            |
|                   | Set ApricotCost To ApricotsBought × ApricotPrice                  |            |
|                   | Set GrapeCost   To GrapesBought   × GrapePrice                    |            |
|                   | Set TomatoCost  To TomatoesBought × TomatoPrice                   |            |
|                   | Set TotalCost To OnionCost + ApricotCost + GrapeCost + TomatoCost |            |
|                   | Set Change To Balance - TotalCost                                 |            |
|                   | Display TotalCost, Change                                         |            |
|-------------------+-------------------------------------------------------------------+------------|
** Pseudocode
#+begin_src fundamental
  START

  INPUT Balance
  INPUT OnionPrice, ApricotPrice, GrapePrice, TomatoPrice
  INPUT OnionsBought, ApricotsBought, GrapesBought, TomatoesBought

  SET OnionCost   = OnionsBought   × OnionPrice
  SET ApricotCost = ApricotsBought × ApricotPrice
  SET GrapeCost   = GrapesBought   × GrapePrice
  SET TomatoCost  = TomatoesBought × TomatoPrice
  SET TotalCost = OnionCost + ApricotCost + GrapeCost + TomatoCost
  SET Change = Balance - TotalCost
  PRINT "Total cost: ", TotalCost
  PRINT "Change: ", Change

  END
#+end_src
** Flowchart
[[file:problem-4.svg]]
* Problem 5: Crop Management
** Problem
A smart agricultural drone monitors a large farm to manage irrigation efficiently. The drone first
checks the type of crop being monitored whether it's wheat, corn, or rice. For wheat, if the soil
moisture is below 30%, and if it has not rained in the last 24 hours, the system will initiate
irrigation. For corn, if the soil moisture is below 40%, the system will irrigate regardless of
recent rainfall. For rice, if the soil moisture is below 25%, the system will irrigate unless it has
rained in the last 24 hours. If the soil moisture is above these thresholds, no irrigation is
applied. Design a solution to determine if irrigation should be initiated based on the crop type,
soil moisture level, and rainfall status.
** IPO
|-----------------------------------+-----------------------------------------------------------------+----------------------------|
| Input                             | Processing                                                      | Output                     |
|-----------------------------------+-----------------------------------------------------------------+----------------------------|
| Type of crop                      | Input CropType                                                  | If irrigation should start |
| Percentage of moisture            | Input Moisture                                                  |                            |
| How many hours ago it last rained | Input LastRainedHours                                           |                            |
|                                   | If CropType is not Wheat nor Corn nor Rice or Moisture > 100    |                            |
|                                   | Print "Invalid Input"                                           |                            |
|                                   | Otherwise Continue...                                           |                            |
|                                   | If CropType is Wheat and Moisture < 30 and LastRainedHours > 24 |                            |
|                                   | OR CropType is Corn and Moisture < 40                           |                            |
|                                   | OR CropType is Rice and Moisture < 25 and LastRainedHours <= 24 |                            |
|                                   | Print "Irrigation should initiate"                              |                            |
|                                   | Otherwise Print "Irrigation should NOT initiate"                |                            |
|-----------------------------------+-----------------------------------------------------------------+----------------------------|
** Pseudocode
#+begin_src fundamental
  START

  INPUT CropType, Moisture, LastRainedHours
  IF (CropType != "Wheat" && CropType != "Corn" && CropType != "Rice")
     || (Moisture > 100) THEN
      PRINT "Invalid input"
  ELSE
      IF (CropType == "Wheat" && Moisture < 30 && LastRainedHours > 24)
         || (CropType == "Corn" && Moisture < 40)
         || (CropType == "Rice" && Moisture < 25 && LastRainedHours <= 24) THEN
          PRINT "Irrigation should initiate"
      ELSE
          PRINT "Irrigation should NOT initiate"
  	ENDIF
  ENDIF

  END
#+end_src
** Flowchart
[[file:problem-5.svg]]
* Problem 6: Amusement Park Ride Eligibility
** Problem
Safari park is a famous amusement park situated in Karachi that has specific height and age
requirements for its rides. For The Dragon Roller Coaster, visitors must be at least 48 inches tall
and 10 years old. The Sky Swing requires visitors to be at least 54 inches tall, with no age
restriction. The Carousel has no height requirement but visitors must be at least 5 years old. A
visitor is wearing a band so he may take as many rides as he wants until he is tired. Design a
solution that determines if a visitor meets the criteria to go on a chosen ride based on their
height, age, and selected ride.
** IPO
|------------------+-------------------------------------------------------------------+--------------------------------|
| Input            | Processing                                                        | Output                         |
|------------------+-------------------------------------------------------------------+--------------------------------|
| Age              | Read Age, Height, Ride                                            | If visitor can sit in the ride |
| Height in inches | If (Ride is not Dragon Roller Coaster nor Sky Swing Nor Carousel) |                                |
| Ride name        | Or Age is negative Or Height is negative                          |                                |
|                  | Then Print "Invalid Input"                                        |                                |
|                  | Exit                                                              |                                |
|                  | Otherwise, continue...                                            |                                |
|                  | If Ride is Dragon Roller Coaster and Height >= 48 and Age >= 10   |                                |
|                  | Or Ride is Sky Swing and Height >= 48                             |                                |
|                  | Or Ride is Carousel and Age >= 5                                  |                                |
|                  | Then Print "You meet the criteria for The ", Ride                 |                                |
|                  | Otherwise Print "You DO NOT meet the criteria for The", Ride      |                                |
|------------------+-------------------------------------------------------------------+--------------------------------|
** Pseudocode
#+begin_src fundamental
  START

  READ Age, Height, Ride
  IF (Ride != "Dragon Roller Coaster" && Ride != "Sky Swing" && Ride != Carousel")
     || (Age < 0) || (Height < 0) THEN
  	PRINT "Invalid Input"
  ELSE
  	IF (Ride == "Dragon Roller Coaster" && Height >= 48 && Age >= 10)
  	   || (Ride == "Sky Swing" && Height >= 48)
  	   || (Ride == "Carousel"  && Age >= 5) THEN
          PRINT "You meet the criteria for The ", Ride
  	ELSE
  	    PRINT "You DO NOT meet the criteria for The ", Ride
  	ENDIF
  ENDIF

  END
#+end_src
** Flowchart
[[file:problem-6.svg]]
* Problem 7: Which Floor...
** Problem
#+ATTR_ORG: :width 200px
[[file:which-floor-ref.png]]
There are 10 floors in a building 0 to 9. The building lift/elevator has a 1 digit, 7 segment LCD
Panel display to tell which floor the lift is on, as shown. The input into the LCD Panel is a
7-digit long number with only 1s and 0s. Each digit of the 7-digit long number tells which panel to
light or not to light from A to G respectively, where 1 means to light the panel and 0 means to keep
it off. E.g., 0110000 means only panel ‘B’ and ‘C’ are lit thus telling that this is the first
floor. Similarly, the number 1111110 tells that all panels are lit except panel ‘G’ displaying the
number 0. You need to design a program for a computer surveillance system to tell which floor the
lift is on. The input for the program is the 7-digit number comprising only 1s and 0s. The output
should be a single digit number 0 to 9 telling which floor the lift is on.  Hint: You can get the
last digit by using %10 and the remaining digits by using number division /10. Also, you only need
branching to do it.
** IPO
|---------------------------------+--------------------------------------------------------------------+---------------------------------------|
| Input                           | Processing                                                         | Output                                |
|---------------------------------+--------------------------------------------------------------------+---------------------------------------|
| A 7-or-less-digit binary number | Read input                                                         | Floor shown by display through binary |
|                                 |                                                                    |                                       |
|                                 | IF input < 0 or input > 1111111                                    |                                       |
|                                 | PRINT "Input must be a seven digit positive binary number!"        |                                       |
|                                 | ... and EXIT                                                       |                                       |
|                                 | Otherwise, continue...                                             |                                       |
|                                 |                                                                    |                                       |
|                                 | Create array of 7 elements named digits filled with zeroes         |                                       |
|                                 | Set processed to input                                             |                                       |
|                                 | Set current_digit to 0                                              |                                       |
|                                 | Loop from i = 0 to 6 with step = 1                                 |                                       |
|                                 | Set current_digit to remainder of dividing processed by 10          |                                       |
|                                 | If current_digit > 1                                                |                                       |
|                                 | Then Print "Digits other than 1 and 0 provided!"                   |                                       |
|                                 | ... and Exit                                                       |                                       |
|                                 | Otherwise, continue (still inside loop)...                         |                                       |
|                                 | Set digits at index 6 - i to current_digit                          |                                       |
|                                 | Set processed to processed / 10                                    |                                       |
|                                 | Endloop                                                            |                                       |
|                                 |                                                                    |                                       |
|                                 | Create 2D array of mapping every floor to corresponding binary num |                                       |
|                                 |                                                                    |                                       |
|                                 | Set valid_floor to False                                            |                                       |
|                                 | Set floor = -1                                                     |                                       |
|                                 | Loop from i = 0 to 8 with step = 1                                 |                                       |
|                                 | Set valid_floor to True                                             |                                       |
|                                 | Set floor = i                                                      |                                       |
|                                 | Loop (nested) from j = 0 to 6 with step = 1                        |                                       |
|                                 | If digits at index j is not equal to floor_digits at index i,j      |                                       |
|                                 | Then Set valid_floor to False                                       |                                       |
|                                 | ... and Exit                                                       |                                       |
|                                 | Otherwise, continue with next iteration of nested loop             |                                       |
|                                 | Endloop (nested)                                                   |                                       |
|                                 |                                                                    |                                       |
|                                 | If valid_floor is True Then Break                                   |                                       |
|                                 | Otherwise, continue with iteration of outside loop                 |                                       |
|                                 |                                                                    |                                       |
|                                 | If valid_floor is False Then PRINT "Invalid Floor!"                 |                                       |
|                                 | Otherwise PRINT "Your floor is ", floor                            |                                       |
|---------------------------------+--------------------------------------------------------------------+---------------------------------------|
** Pseudocode
#+begin_src fundamental
  START

  READ input
  IF input < 0 || input > 1111111 THEN
      PRINT "Input must be a seven digit positive binary number!"
      EXIT
  ENDIF

  SET digits[7] TO {0, 0, 0, 0, 0, 0, 0};
  SET processed TO input;
  SET current_digit TO 0;
  FOR i FROM 0 TO 6 STEP 1 DO
      SET current_digit TO processed % 10;
  	IF current_digit > 1 THEN
  	    PRINT "Digits other than 1 and 0 provided!"
  		EXIT
  	ENDIF
      SET digits[6 - i] TO current_digit;
      SET processed TO processed / 10; // Truncates to an integer
  ENDLOOP

  SET floor_digits[9][7] TO {
    {1, 1, 1, 1, 1, 1, 0}, // 0: ABCDEF-
    {0, 1, 1, 0, 0, 0, 0}, // 1: -BC----
    {1, 1, 0, 1, 1, 0, 1}, // 2: AB-DE-G
    {1, 1, 1, 1, 0, 0, 1}, // 3: ABCD--G
    {0, 1, 1, 0, 0, 1, 1}, // 4: -BC--FG
    {1, 0, 1, 1, 0, 1, 1}, // 5: A-CD-FG
    {1, 0, 1, 1, 1, 1, 1}, // 6: A-CDEFG
    {1, 1, 1, 0, 0, 0, 0}, // 7: ABC----
    {1, 1, 1, 1, 1, 1, 1}, // 8: ABCDEFG
  };

  SET valid_floor = False
  SET floor = -1
  FOR i FROM 0 TO 8 STEP 1 DO
      valid_floor = True
  	floor = i
  	FOR j FROM 0 TO 6 STEP 1 DO
  	    IF digits[j] != floor_digits[i][j] THEN
  		    valid_floor = False
  			BREAK
  		ENDIF
  	ENDLOOP
  	IF valid_floor THEN
  	    BREAK
      ENDIF
  ENDLOOP

  IF NOT valid_floor THEN
      PRINT "Invalid floor!"
  ELSE
      PRINT "Your floor is ", floor
  ENDIF

  END
#+end_src
** Flowchart
[[file:problem-7.svg]]
** C Code
#+begin_src C
  #include <stdio.h>
  #include <stdbool.h>

  int main()
  {
    printf("Enter your 7 digit floor number: ");
    int floor = -1, length = 1, input;
    scanf("%d", &input);
    if (input < 0 || input > 1111111) {
  	printf("Input must be a seven digit positive binary number!\n");
  	return -1;
    }
    
    int digits[7] = {0};
    int processed = input;
    int current_digit = 0;
    for (int i = 0; i < 7; i++) {
  	int current_digit = processed % 10;
  	if (current_digit > 1) 	{
  	  printf("Digits other than 1 and 0 provided!\n");
  	  return -1;
  	}
  	digits[6 - i] = current_digit;
  	processed /= 10;
    }

    int floor_digits[9][7] = {
  	{1, 1, 1, 1, 1, 1, 0}, // 0: ABCDEF-
  	{0, 1, 1, 0, 0, 0, 0}, // 1: -BC----
  	{1, 1, 0, 1, 1, 0, 1}, // 2: AB-DE-G
  	{1, 1, 1, 1, 0, 0, 1}, // 3: ABCD--G
  	{0, 1, 1, 0, 0, 1, 1}, // 4: -BC--FG
  	{1, 0, 1, 1, 0, 1, 1}, // 5: A-CD-FG
  	{1, 0, 1, 1, 1, 1, 1}, // 6: A-CDEFG
  	{1, 1, 1, 0, 0, 0, 0}, // 7: ABC----
  	{1, 1, 1, 1, 1, 1, 1}, // 8: ABCDEFG
    };

    int valid_floor = false;
    for (int i = 0; i < 9 && !valid_floor; i++) {
  	valid_floor = true;
  	floor = i;
  	for (int j = 0; j < 7; j++) {
  	  if (digits[j] != floor_digits[i][j]) {
  		valid_floor = false;
  		break;
  	  }
  	}
    }

    // Print digits array
    printf("Digits: ");
    for (int i = 0; i < 7; i++) {
  	printf("%d, ", digits[i]);
    }
    
    if (!valid_floor) {
  	printf("\nInvalid floor!\n");
  	return -1;
    } else printf("\nFloor: %d\n", floor);
    
    return 0;
  }
#+end_src

* Problem 8: Digit Sum
** Problem
You are required to design a solution that takes as input a single number and prints out the sum of
its digits.
** IPO
|----------+-----------------------------------------------------------+-----------------------|
| Input    | Processing                                                | Output                |
|----------+-----------------------------------------------------------+-----------------------|
| A Number | Read input                                                | The sum of its digits |
|          | set sum to zero and processed to input                    |                       |
|          | loop while processed is greater than zero                 |                       |
|          | set sum to sum plus remainder of dividing processed by 10 |                       |
|          | set processed to processed divided by 10                  |                       |
|          | print sum                                                 |                       |
|----------+-----------------------------------------------------------+-----------------------|
** Pseudocode
#+begin_src fundamental
  START

  READ input
  SET sum = 0, processed = input
  WHILE processed > 0 DO
      sum = sum + processed % 10
  	processed = processed / 10
  ENDLOOP

  PRINT "Sum of digits: ", sum

  END
#+end_src

** Flowchart
[[file:problem-8.svg]]
** C Code
#+begin_src C
  #include <stdio.h>

  int main()
  {
    printf("Please enter a number: ");
    int input;
    scanf("%d", &input);

    int sum = 0, processed = input;
    while (processed > 0) {
  	printf("p: %d, %d, %d\n", processed, processed / 10, processed % 10);
  	sum += processed % 10;
  	processed /= 10;
    }
    
    printf("Sum of digits: %d\n", sum);
    
    return 0;
  }
#+end_src

* Problem 9: Exact Age in Days, Months, and Years from DOB
** Problem
*** Note
For this problem you may ignore the leap years when calculating age but not when validating date of
birth or current date.
*** Main
Mr. Bhoola is trying to figure out how old someone is, but he keeps getting confused! He needs your
help. Your job is to create a solution that makes calculating ages super easy. Here's what you need
to do:
*** Get The Dates
First, you need to ask Mr. Bhoola for two dates: The person's Birthday: This is the date they were
born. And Today's Date: You'll need to know what day it is right now.
*** Check for Mistakes (Validation Step)
Before you can calculate the age, you need to make sure the dates Mr. Bhoola gives you are
correct. Think about these things: Are there too many days in the month? For example, April only has
30 days, so you can't have a date like April 31st. Is it a leap year? February has 29 days on a leap
year, and 28 days otherwise!  Now, you can calculate the exact age. Bonus for also including leap
year in the calculation.
** IPO
|----------------+------------------------------------------------------------------------------+-------------------|
| Input          | Processing                                                                   | Output            |
|----------------+------------------------------------------------------------------------------+-------------------|
| Current Day    | READ nowDay, nowMonth, nowYear                                               | Age of the person |
| Current Month  | READ birthDay, birthMonth, birthYear                                         |                   |
| Current Year   | If nowDay <= 0 or birthDay <= 0                                              |                   |
| Date of Birth  | or nowMonth <= 0 or birthMonth <= 0                                          |                   |
| Month of Birth | or nowYear <= 0 or birthYear <= 0                                            |                   |
| Year of Birth  | Then print "Days, months and years must be greater than zero"                |                   |
|                | ... Exit                                                                     |                   |
|                | Otherwise, continue...                                                       |                   |
|                |                                                                              |                   |
|                | set isNowLeapYear to False                                                   |                   |
|                | If remainder of the division of nowYear by 100 is zero                       |                   |
|                | Then if remainder of division of nowYear by 400 is zero                      |                   |
|                | ... ... Then set isNowLeapYear to True                                       |                   |
|                | Otherwise, (outermost if)                                                    |                   |
|                | If remainder of the division of nowYear by 4 is zero                         |                   |
|                | Then set isNowLeapYear to True                                               |                   |
|                |                                                                              |                   |
|                | set isBirthLeapYear to False                                                 |                   |
|                | If remainder of the division of nowYear by 100 is zero                       |                   |
|                | Then if remainder of division of nowYear by 400 is zero                      |                   |
|                | ... ... Then set isBirthLeapYear to True                                     |                   |
|                | Otherwise, (outermost if)                                                    |                   |
|                | If remainder of the division of nowYear by 4 is zero                         |                   |
|                | Then set isBirthLeapYear to True                                             |                   |
|                |                                                                              |                   |
|                | // Create an array, with length 12 and name monthDaysNonLeap,                |                   |
|                | which stores the count of the days in each month.                            |                   |
|                | set monthDaysNonLeap[12] to {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31} |                   |
|                | set birthMonthDays to monthDaysNonLeap at index birthMonth                   |                   |
|                | If isBirthLeapYear and birthMonth is 2 then set birthMonthDays to 29         |                   |
|                | set nowMonthDays to monthDaysNonLeap at index nowMonth                       |                   |
|                | If isNowLeapYear and birthMonth is 2 then set nowMonthDays to 29             |                   |
|                |                                                                              |                   |
|                | If nowDay > nowMonthDays or birthDay > birthMonthDays                        |                   |
|                | Then Print "Invalid date given!"                                             |                   |
|                | ... and Exit                                                                 |                   |
|                | If nowMonth > 12 or birthMonth > 12                                          |                   |
|                | Then Print "Invalid month given!"                                            |                   |
|                | ... and Exit                                                                 |                   |
|                | If (nowYear < birthYear)                                                     |                   |
|                | or (nowYear is birthYear and nowMonth < birthMonth)                          |                   |
|                | or (nowYear is birthYear and nowMonth is birthMonth and nowDay < birthDay)   |                   |
|                | Then Print "Today's date cannot be bigger than date of birth!"               |                   |
|                | ... and Exit                                                                 |                   |
|                |                                                                              |                   |
|                | Set diffYear to nowYear - birthYear                                          |                   |
|                | Set diffMonth to nowMonth - birthMonth                                       |                   |
|                | If diffMonth < 0                                                             |                   |
|                | Then Set diffYear to diffYear - 1                                            |                   |
|                | ...  Set diffMonth to 12 - birthMonth + nowMonth                             |                   |
|                | Set diffDay to nowDay - birthDay                                             |                   |
|                | If diffDay < 0                                                               |                   |
|                | Then Set diffMonth to diffMonth - 1                                          |                   |
|                | ...  Set diffDay to birthMonthDays - birthDay + nowDay                       |                   |
|                |                                                                              |                   |
|                | Print "Age is: ", diffYear, "Y ", diffMonth, "M ", diffDay, "D"              |                   |
|----------------+------------------------------------------------------------------------------+-------------------|
** Pseudocode
#+begin_src fundamental
  START

  READ nowDay, nowMonth, nowYear
  READ birthDay, birthMonth, birthYear

  IF nowDay <= 0 || birthDay <= 0
     || nowMonth <= 0 || birthMonth <= 0
     || nowYear  <= 0 || birthYear  <= 0 THEN
      PRINT "Days, months and years must be greater than zero!"
  	EXIT
  ENDIF

  SET isNowLeapYear = False
  IF nowYear % 100 == 0 THEN
      IF nowYear % 400 == 0 THEN
  	    SET isNowLeapYear = True
  	ENDIF
  ELSE
      IF nowYear % 4 == 0 THEN
  	    SET isNowLeapYear = True
  	ENDIF
  ENDIF

  SET isBirthLeapYear = False
  IF birthYear % 100 == 0 THEN
      IF birthYear % 400 == 0 THEN
  	    SET isBirthLeapYear = True
  	ENDIF
  ELSE
      IF birthYear % 4 == 0 THEN
  	    SET isBirthLeapYear = True
  	ENDIF
  ENDIF

  // Array of the count of the days in each month
  SET monthDaysNonLeap[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
  SET birthMonthDays = monthDaysNonLeap[birthMonth];
  IF isBirthLeapYear && birthMonth == 2 THEN
      SET birthMonthDays = 29
  ENDIF
  SET nowMonthDays = monthDaysNonLeap[nowMonth];
  IF isNowLeapYear && nowMonth == 2 THEN
      SET nowMonthDays = 29
  ENDIF

  IF nowDay > nowMonthDays || birthDay > birthMonthDays THEN
      PRINT "Invalid date given!"
  	EXIT
  ELSE IF nowMonth > 12 || birthMonth > 12 THEN
      PRINT "Invalid month given!"
  	EXIT
  ELSE IF nowYear < birthYear 
          || (nowYear == birthYear && nowMonth < birthMonth)
          || (nowYear == birthYear && nowMonth == birthMonth && nowDay < birthDay) THEN
      PRINT "Today's date cannot be bigger than date of birth!"
  	EXIT
  ENDIF

  SET diffYear = nowYear - birthYear
  SET diffMonth = nowMonth - birthMonth
  IF diffMonth < 0 THEN
      diffYear = diffYear - 1
  	diffMonth = 12 - birthMonth + nowMonth
  ENDIF
  SET diffDay = nowDay - birthDay
  IF diffDay < 0 THEN
      diffMonth = diffMonth - 1
  	diffDay = birthMonthDays - birthDay + nowDay;
  ENDIF

  PRINT "Age is: ", diffYear, "Y ", diffMonth, "M ", diffDay, "D"

  END
#+end_src
** Flowchart
[[file:problem-9.svg]]
** C Code
#+begin_src C
  #include <stdio.h>

  int main() {
      int nowDay, nowMonth, nowYear;
      printf("Now\n----------\nDay: ");
      scanf("%d", &nowDay);
      printf("Month: ");
      scanf("%d", &nowMonth);
      printf("Year: ");
      scanf("%d", &nowYear);
      int birthDay, birthMonth, birthYear;
      printf("Birthday\n----------\nDay: ");
      scanf("%d", &birthDay);
      printf("Month: ");
      scanf("%d", &birthMonth);
      printf("Year: ");
      scanf("%d", &birthYear);
      
      if (nowDay <= 0 || birthDay <= 0
          || nowMonth <= 0 || birthMonth <= 0
          || nowYear <= 0 || birthYear <= 0){
          printf("Days, months and years must be greater than zero!");
          return -1;
      }
      
      int isNowLeapYear = nowYear % 100 == 0 
                          ? nowYear % 400 == 0 
                          : nowYear % 4 == 0;
      int isBirthLeapYear = birthYear % 100 == 0 
                            ? birthYear % 400 == 0 
                            : birthYear % 4 == 0;
      int monthDaysNonLeap[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
      int birthMonthDays = (isBirthLeapYear && birthMonth == 2)
                           ? 29 : monthDaysNonLeap[birthMonth];
      int nowMonthDays = (isNowLeapYear && nowMonth == 2)
                         ? 29 : monthDaysNonLeap[nowMonth];
      
      if (nowDay > nowMonthDays || birthDay > birthMonthDays) {
          printf("Invalid date given!");
          return -1;
      } else if (nowMonth > 12 || birthMonth > 12) {
          printf("Invalid month given!");
          return -1;
      } else if (nowYear < birthYear 
          || (nowYear == birthYear && nowMonth < birthMonth)
          || (nowYear == birthYear && nowMonth == birthMonth && nowDay < birthDay))
      {
          printf("Today's date cannot be bigger than date of birth!");
          return -1;
      }
      int diffYear = nowYear - birthYear;
      int diffMonth = nowMonth - birthMonth;
      if (diffMonth < 0) {
          diffYear--;
          diffMonth = 12 - birthMonth + nowMonth; 
      }
      int diffDay = nowDay - birthDay;
      if (diffDay < 0) {
          diffMonth--;
          diffDay = birthMonthDays - birthDay + nowDay;
      }
      
      printf("BirthLeap: %d, NowLeap: %d, BirthMonthDays: %d, nowMonthDays: %d\n", isBirthLeapYear, isNowLeapYear, birthMonthDays, nowMonthDays);
      printf("Age is: %dY %dM %dD\n", diffYear, diffMonth, diffDay);
      
      return 0;
  }
#+end_src

* Problem 10: Poor Mr. Bhoola Bought a Faulty Keyboard
** Problem
Imagine Mr. Bhoola's keyboard is a bit mischievous! Every time he types the number "9," the keyboard
adds an extra zero. So, if he types "9," it shows up as "90".  Your Mission: Mr. Bhoola wrote down
some numbers using his silly keyboard. But we know they're wrong because of the extra zeroes. Your
job is to fix them by taking away the extra zeroes whenever you see a "90" in the number.  Here are
some examples: 100900: The keyboard typed "90" where there should be "9". So, it's really 10090.
1540090: The keyboard added an extra zero again. It's really 154009.  1290905: This one is tricky!
There's a "90" where there should be a "9". It's really 12995.  Design a solution to fix the other
numbers Mr. Bhoola wrote down!
** IPO
|---------------+-------------------------------------------------------------------------------+--------------------------------------------|
| Input         | Processing                                                                    | Output                                     |
|---------------+-------------------------------------------------------------------------------+--------------------------------------------|
| Faulty number | Read input                                                                    | Corrected number with extra zeroes removed |
|               | set processing to input                                                       |                                            |
|               | set current_digit to -1                                                        |                                            |
|               | set next_digit to -1                                                           |                                            |
|               | set result to 0                                                               |                                            |
|               | set i to 0                                                                    |                                            |
|               | loop while processing > 0                                                     |                                            |
|               | set current_digit to remainder of division of processing by 10                 |                                            |
|               | check if current_digit is 0 then                                               |                                            |
|               | ... set next_digit to remainder of division of (processing by 10) divied by 10 |                                            |
|               | ... check if (nested) next_digit is 9 then                                     |                                            |
|               | ... ... set processing to processing divided by 10                            |                                            |
|               | ... ... Continue! (Skip the rest of this iteration in loop)                   |                                            |
|               | set result to result + (10 to the power of i) multiplied by current_digit      |                                            |
|               | set processing to processing divided by 10                                    |                                            |
|               | set i to i + 1                                                                |                                            |
|               | End of loop                                                                   |                                            |
|               |                                                                               |                                            |
|               | Print result                                                                  |                                            |
|---------------+-------------------------------------------------------------------------------+--------------------------------------------|
** Pseudocode
#+begin_src fundamental
  START

  READ input
  SET processing = input, current_digit = -1, next_digit = -1, result = 0, i = 0
  WHILE processing > 0 DO
      current_digit = processing % 10
      IF current_digit == 0 THEN
  	    next_digit = (processing / 10) % 10
  		IF next_digit == 9 THEN
  		    processing = processing / 10
  			CONTINUE
  		ENDIF
  	ENDIF
  	result = result + ((10^i) * current_digit)
  	processing = processing / 10
  	i = i + 1
  ENDLOOP

  PRINT result

  END
#+end_src

** Flowchart
[[file:problem-10.svg]]
** C Code
#+begin_src C
  #include <stdio.h>
  #include <math.h>

  int main()
  {
    int input = 1290905;
    scanf("%d", &input);

    int processing = input, current_digit = -1, next_digit = -1, result = 0, i = 0;
    while (processing > 0) {
  	current_digit = processing % 10;
  	if (current_digit == 0) {
  	  next_digit = ((processing / 10) % 10);
  	  if (next_digit == 9) {
  		processing /= 10;
  		continue;
  	  }
  	}
  	result += pow(10, i) * current_digit;
  	processing /= 10;
  	i++;
    }
    
    printf("%d -> %d", input, result);
    
    return 0;
  }
#+end_src

* Problem 11: No Not Optimus Prime it's Coprime...
** Problem
Mr. Bhoola just found out about coprime numbers. Now he is obsessed with them and keeps checking two
numbers whether they are coprime or not. You are to design a solution to this problem and help
Mr. Bhoola with checking whether any two whole numbers greater than 0 are coprime or not. A
simplified definition of Coprime numbers is that their GCD is 1. You are encouraged to check wiki or
other resources for more information. Examples: 8 and 9 are coprimes despite the fact that they are
not prime numbers. 14 and 33 are coprimes.
** IPO
|-------------------------------------+-------------------------------------------------------+-----------------------------------|
| Input                               | Processing                                            | Output                            |
|-------------------------------------+-------------------------------------------------------+-----------------------------------|
| Two whole numbers greater than zero | Read a, b                                             | If the numbers are coprime or not |
|                                     | Set tmp to a                                          |                                   |
|                                     |                                                       |                                   |
|                                     | If a is less than or equal to zero                    |                                   |
|                                     | OR b is less than or equal to zero                    |                                   |
|                                     | Then, Print "Both a and b must be greater than zero!" |                                   |
|                                     | ... Exit                                              |                                   |
|                                     | Otherwise, continue...                                |                                   |
|                                     |                                                       |                                   |
|                                     | If a is less than b                                   |                                   |
|                                     | Then set tmp to a                                     |                                   |
|                                     | ... set a to b                                        |                                   |
|                                     | ... set b to tmp                                      |                                   |
|                                     |                                                       |                                   |
|                                     | Loop while remainder of a divided by b is not zero    |                                   |
|                                     | set tmp to a                                          |                                   |
|                                     | set a to b                                            |                                   |
|                                     | set b to tmp                                          |                                   |
|                                     | set b to the remainder of b divided by a              |                                   |
|                                     | End loop                                              |                                   |
|                                     |                                                       |                                   |
|                                     | If b is one                                           |                                   |
|                                     | then Print "The numbers are coprime!"                 |                                   |
|                                     | Otherwise, Print "The numbers are NOT coprime..."     |                                   |
|-------------------------------------+-------------------------------------------------------+-----------------------------------|
** Pseudocode
#+begin_src fundamental
  START

  READ a, b
  SET tmp = a

  IF a <= 0 || b <= 0 THEN
      PRINT "Both a and b must be greater than zero!"
      EXIT
  ENDIF

  IF a < b THEN
      tmp = a
  	a = b
  	b = tmp
  ENDIF

  WHILE a % b != 0 DO
      tmp = a
  	a = b
  	b = tmp
  	b = b % a
  ENDLOOP

  IF b == 1 THEN
      PRINT "The numbers are coprime!"
  ELSE
      PRINT "The numbers are NOT coprime..."
  ENDIF

  END
#+end_src

** Flowchart
[[file:problem-11.svg]]
** C Code
#+begin_src C
  #include <stdio.h>

  int main()
  {
    int a = 14, b = 33, tmp = a;
    scanf("%d", &a);
    scanf("%d", &b);

    if (a <= 0 || b <= 0) {
  	printf("Both a and b must be greater than zero!");
  	return -1;
    }
    
    if (a < b) {
  	tmp = a;
  	a = b;
  	b = tmp;
    }

    while (a % b != 0) {
  	tmp = a;
  	a = b;
  	b = tmp;
  	b %= a;
    }

    printf("GCD is %d, coprime? %c", b, b == 1 ? 'Y' : 'N');
    
    return 0;
  }
#+end_src

* Problem 12: Die Hard 3: Defuse the Bomb... Quick!
** Problem
You've got to defuse a bomb by placing exactly 4 liters of water on a sensor. And you have to be
quick! The problem is, you only have a 5L jug and a 3L jug on hand! See the video clip here:
https://youtu.be/BVtQNK_ZUJg You have an unlimited water source, and if needed you can also empty
the water in the jugs to get rid of it. How could 4 liters be measured?
** IPO
|------------------------+--------------------------------------------+----------|
| Input                  | Processing                                 | Output   |
|------------------------+--------------------------------------------+----------|
| 5L Jug                 | Set threeJug To 0                          | 4L Water |
| 3L Jug                 | Set waterSupply To ∞                      |          |
| Unlimited water supply |                                            |          |
|                        | // Fill 5L Jug                             |          |
|                        | fiveJug = fiveJug + 5                      |          |
|                        | waterSupply = waterSupply - fiveJug        |          |
|                        |                                            |          |
|                        | // Pour 5L Jug into 3L Jug                 |          |
|                        | threeJug = threeJug + 3                    |          |
|                        | fiveJug = fiveJug - 3                      |          |
|                        |                                            |          |
|                        | // Empty 3L Jug                            |          |
|                        | waterSupply = waterSupply + threeJug       |          |
|                        | threeJug = threeJug - threeJug             |          |
|                        |                                            |          |
|                        | // Pour remaining 2L in 5L Jug into 3L Jug |          |
|                        | threeJug = threeJug + fiveJug              |          |
|                        | fiveJug = fiveJug - fiveJug                |          |
|                        |                                            |          |
|                        | // Refill 5L Jug                           |          |
|                        | fiveJug = fiveJug + 5                      |          |
|                        | waterSupply = waterSupply - fiveJug        |          |
|                        |                                            |          |
|                        | // Fill 3L Jug using 5L Jug                |          |
|                        | Set leftToFill = 3 - threeJug              |          |
|                        | threeJug = threeJug + leftToFill           |          |
|                        | fiveJug = fiveJug - leftToFill             |          |
|                        |                                            |          |
|                        | // 5L Jug has exactly 4L!                  |          |
|                        | PRINT threeJug, fiveJug                    |          |
|------------------------+--------------------------------------------+----------|

** Pseudocode
#+begin_src fundamental
  SET fiveJug = 0
  SET threeJug = 0
  SET waterSupply = ∞

  // Fill 5L Jug
  fiveJug = fiveJug + 5
  waterSupply = waterSupply - fiveJug

  // Pour 5L Jug into 3L Jug
  threeJug = threeJug + 3
  fiveJug = fiveJug - 3

  // Empty 3L Jug
  waterSupply = waterSupply + threeJug
  threeJug = threeJug - threeJug

  // Pour remaining 2L in 5L Jug into 3L Jug
  threeJug = threeJug + fiveJug
  fiveJug = fiveJug - fiveJug

  // Refill 5L Jug
  fiveJug = fiveJug + 5
  waterSupply = waterSupply - fiveJug

  // Fill 3L Jug using 5L Jug
  SET leftToFill = 3 - threeJug
  threeJug = threeJug + leftToFill
  fiveJug = fiveJug - leftToFill

  // 5L Jug has exactly 4L!
  PRINT "3L Jug = ", threeJug, ", 5L Jug = ", fiveJug
#+end_src

** Flowchart
[[file:problem-12.svg]]
** C Code
#+begin_src C
  #include <stdio.h>

  int main()
  {
    int fiveJug = 0, threeJug = 0, waterSupply = 999999;

    // Fill 5L Jug
    fiveJug += 5;
    waterSupply -= fiveJug;

    // Pour 5L Jug into 3L Jug
    threeJug += 3;
    fiveJug -= 3;

    // Empty 3L Jug
    waterSupply += threeJug;
    threeJug -= threeJug;

    // Pour remaining 2L in 5L Jug into 3L Jug
    threeJug += fiveJug;
    fiveJug -= fiveJug;

    // Refill 5L Jug
    fiveJug += 5;
    waterSupply -= fiveJug;

    // Fill 3L Jug using 5L Jug
    int leftToFill = 3 - threeJug;
    threeJug += leftToFill;
    fiveJug -= leftToFill;

    // 5L Jug has exactly 4L!
    printf("3L Jug = %d, 5L Jug = %d", threeJug, fiveJug);

    return 0;
  }

#+end_src

* Problem 13: The General N-M Size Die Hard Jug Problem
** Problem
Design a solution to solve the general form M-NL jugs of the above problem. So instead of having
just 3-5L jugs you can be given 3-9L jugs or 7-9L jugs. Can you extract any number of liters of
water less than the larger jug or only some quantities. Is there a formula for this? What amounts of
water can be extracted from M-NL jugs?
** General Answer

** IPO
|-------+------------+--------|
| Input | Processing | Output |
|-------+------------+--------|
|       |            |        |
|-------+------------+--------|
** Pseudocode
** Flowchart
